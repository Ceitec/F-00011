
Bootloader-Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000186  00800060  00800060  00000822  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000822  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000854  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014a8  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000775  00000000  00000000  00001eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b6  00000000  00000000  0000262d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00002de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000782  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d01  00000000  00000000  0000398e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  0000468f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 3f 03 	jmp	0x67e	; 0x67e <__vector_6>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 e4 01 	jmp	0x3c8	; 0x3c8 <__vector_13>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_15>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	24 03       	mulsu	r18, r20
  56:	26 03       	mulsu	r18, r22
  58:	38 03       	fmul	r19, r16
  5a:	28 03       	fmul	r18, r16
  5c:	2a 03       	fmul	r18, r18
  5e:	2c 03       	fmul	r18, r20
  60:	2e 03       	fmul	r18, r22
  62:	30 03       	mulsu	r19, r16
  64:	32 03       	mulsu	r19, r18
  66:	34 03       	mulsu	r19, r20
  68:	36 03       	mulsu	r19, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	ee ea       	ldi	r30, 0xAE	; 174
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b0 e0       	ldi	r27, 0x00	; 0
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	a6 3e       	cpi	r26, 0xE6	; 230
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
  9c:	0e 94 75 03 	call	0x6ea	; 0x6ea <main>
  a0:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <TB_Send>:
/******************************************************/
// private functions
/******************************************************/
void TB_Send(void)
{
  if (TB_Callback_TX != NULL) TB_Callback_TX();
  a8:	e0 91 62 00 	lds	r30, 0x0062
  ac:	f0 91 63 00 	lds	r31, 0x0063
  b0:	30 97       	sbiw	r30, 0x00	; 0
  b2:	09 f0       	breq	.+2      	; 0xb6 <TB_Send+0xe>
  b4:	09 94       	ijmp
  b6:	08 95       	ret

000000b8 <TB_calcSum>:
}


/******************************************************/
void TB_calcSum(void)
{
  b8:	e1 e9       	ldi	r30, 0x91	; 145
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  byte i, sum;
  sum = 0;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	98 e0       	ldi	r25, 0x08	; 8
  c0:	9e 0f       	add	r25, r30
  for(i=0; i<8; i++) {
    sum += TB_bufOut[i];
  c2:	21 91       	ld	r18, Z+
  c4:	82 0f       	add	r24, r18
/******************************************************/
void TB_calcSum(void)
{
  byte i, sum;
  sum = 0;
  for(i=0; i<8; i++) {
  c6:	9e 13       	cpse	r25, r30
  c8:	fc cf       	rjmp	.-8      	; 0xc2 <TB_calcSum+0xa>
    sum += TB_bufOut[i];
  }
  TB_bufOut[TB_BUF_SUM] = sum;
  ca:	80 93 99 00 	sts	0x0099, r24
  ce:	08 95       	ret

000000d0 <TB_Init>:
/******************************************************/
// public functions
/******************************************************/
// initialize
void TB_Init(void * setting_in_eeprom)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	ec 01       	movw	r28, r24
  addr_setting_in_eeprom = setting_in_eeprom;
  d6:	90 93 ab 00 	sts	0x00AB, r25
  da:	80 93 aa 00 	sts	0x00AA, r24
  //                 DST,   SRC, size
  eeprom_read_block((void *) &TB_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
  de:	45 e0       	ldi	r20, 0x05	; 5
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	bc 01       	movw	r22, r24
  e4:	8a e9       	ldi	r24, 0x9A	; 154
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 9d 03 	call	0x73a	; 0x73a <eeprom_read_block>
  if (TB_gbparam.eemagic != 65) {
  ec:	80 91 9a 00 	lds	r24, 0x009A
  f0:	81 34       	cpi	r24, 0x41	; 65
  f2:	a9 f0       	breq	.+42     	; 0x11e <TB_Init+0x4e>
    // not valid data in eeprom
    TB_gbparam.eemagic = 66;
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	80 93 9a 00 	sts	0x009A, r24
    TB_gbparam.baud = 4;
  fa:	84 e0       	ldi	r24, 0x04	; 4
  fc:	80 93 9b 00 	sts	0x009B, r24
    TB_gbparam.address = SC_MODUL;
 100:	86 e0       	ldi	r24, 0x06	; 6
 102:	80 93 9c 00 	sts	0x009C, r24
    TB_gbparam.telegram_pause_time = 0;
 106:	10 92 9d 00 	sts	0x009D, r1
    TB_gbparam.host_address = 2;
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 9e 00 	sts	0x009E, r24
    // save default setting to eeprom
    eeprom_write_block((void *) &TB_gbparam, setting_in_eeprom, sizeof(struct TB_GBPARAM));
 110:	45 e0       	ldi	r20, 0x05	; 5
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	be 01       	movw	r22, r28
 116:	8a e9       	ldi	r24, 0x9A	; 154
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 be 03 	call	0x77c	; 0x77c <eeprom_write_block>
  }
  // ted mame funkèni konfiguraci naètenou

  // zvolíme správnou komunikaèní rychlost:
  if (TB_Callback_setBaud != NULL) TB_Callback_setBaud(TB_gbparam.baud);
 11e:	e0 91 60 00 	lds	r30, 0x0060
 122:	f0 91 61 00 	lds	r31, 0x0061
 126:	30 97       	sbiw	r30, 0x00	; 0
 128:	19 f0       	breq	.+6      	; 0x130 <TB_Init+0x60>
 12a:	80 91 9b 00 	lds	r24, 0x009B
 12e:	09 95       	icall

  // poznaèíme si adresy
  TB_AddrReply = TB_gbparam.host_address;
 130:	80 91 9e 00 	lds	r24, 0x009E
 134:	80 93 ac 00 	sts	0x00AC, r24
  TB_AddrModule= TB_gbparam.address;
 138:	80 91 9c 00 	lds	r24, 0x009C
 13c:	80 93 a0 00 	sts	0x00A0, r24
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <TB_SendAck>:

/******************************************************/
// send response from module
void TB_SendAck(byte status, long int value)
{
  TB_bufOut[0] = TB_AddrReply;
 146:	e1 e9       	ldi	r30, 0x91	; 145
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	90 91 ac 00 	lds	r25, 0x00AC
 14e:	90 83       	st	Z, r25
  TB_bufOut[1] = TB_AddrModule;
 150:	90 91 a0 00 	lds	r25, 0x00A0
 154:	91 83       	std	Z+1, r25	; 0x01
  TB_bufOut[2] = status;
 156:	82 83       	std	Z+2, r24	; 0x02
  TB_bufOut[3] = TB_bufIn[TB_BUF_COMMAND]; //command;
 158:	80 91 a2 00 	lds	r24, 0x00A2
 15c:	83 83       	std	Z+3, r24	; 0x03
  TB_bufOut[4] = value >> 24;
 15e:	74 83       	std	Z+4, r23	; 0x04
  TB_bufOut[5] = value >> 16;
 160:	65 83       	std	Z+5, r22	; 0x05
  TB_bufOut[6] = value >> 8;
 162:	56 83       	std	Z+6, r21	; 0x06
  TB_bufOut[7] = value >> 0;
 164:	47 83       	std	Z+7, r20	; 0x07
  TB_calcSum();
 166:	0e 94 5c 00 	call	0xb8	; 0xb8 <TB_calcSum>
  TB_Send();
 16a:	0c 94 54 00 	jmp	0xa8	; 0xa8 <TB_Send>

0000016e <TB_Read>:
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
 16e:	90 91 a1 00 	lds	r25, 0x00A1
 172:	80 91 a0 00 	lds	r24, 0x00A0
 176:	98 13       	cpse	r25, r24
 178:	15 c0       	rjmp	.+42     	; 0x1a4 <TB_Read+0x36>
 17a:	e1 ea       	ldi	r30, 0xA1	; 161
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	98 e0       	ldi	r25, 0x08	; 8
 182:	9e 0f       	add	r25, r30
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
    sum += TB_bufIn[i];
 184:	21 91       	ld	r18, Z+
 186:	82 0f       	add	r24, r18
  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
  
  // check SUM byte
  sum = 0;
  for( i=0; i<8; i++) {
 188:	9e 13       	cpse	r25, r30
 18a:	fc cf       	rjmp	.-8      	; 0x184 <TB_Read+0x16>
    sum += TB_bufIn[i];
  }
  if (sum != TB_bufIn[TB_BUF_SUM]) {
 18c:	90 91 a9 00 	lds	r25, 0x00A9
 190:	89 17       	cp	r24, r25
 192:	51 f0       	breq	.+20     	; 0x1a8 <TB_Read+0x3a>
    TB_SendAck(1, 0); // wrong checksum
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	ba 01       	movw	r22, r20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	0e 94 a3 00 	call	0x146	; 0x146 <TB_SendAck>
    return 3; // bad checksum
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	08 95       	ret
{
  byte i;
  byte sum;

  // check address
  if (TB_bufIn[TB_BUF_ADDRESS] != TB_AddrModule) return 2;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	08 95       	ret
    TB_SendAck(1, 0); // wrong checksum
    return 3; // bad checksum
  }

  // we have valid data in TB_bufIn
  return 0;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
}
 1aa:	08 95       	ret

000001ac <TB_Decode>:

/******************************************************/
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	1f 93       	push	r17
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	1f 92       	push	r1
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
	volatile byte b;
	TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 1c0:	20 91 a5 00 	lds	r18, 0x00A5
			   (((int32_t) TB_bufIn[5]) << 16) |
 1c4:	60 91 a6 00 	lds	r22, 0x00A6
 1c8:	86 2f       	mov	r24, r22
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	dc 01       	movw	r26, r24
 1d2:	99 27       	eor	r25, r25
 1d4:	88 27       	eor	r24, r24
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
	volatile byte b;
	TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 1d6:	b2 2b       	or	r27, r18
			   (((int32_t) TB_bufIn[5]) << 16) |
               (((int32_t) TB_bufIn[6]) <<  8) |
               (((int32_t) TB_bufIn[7])      ) ;
 1d8:	20 91 a8 00 	lds	r18, 0x00A8
 1dc:	82 2b       	or	r24, r18
byte TB_Decode(void)
{
	volatile byte b;
	TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
			   (((int32_t) TB_bufIn[5]) << 16) |
               (((int32_t) TB_bufIn[6]) <<  8) |
 1de:	20 91 a7 00 	lds	r18, 0x00A7
 1e2:	bc 01       	movw	r22, r24
 1e4:	cd 01       	movw	r24, r26
 1e6:	72 2b       	or	r23, r18
// decode incoming command
// return = unhandled command number, 0=handled or unknown
byte TB_Decode(void)
{
	volatile byte b;
	TB_Value = (((int32_t) TB_bufIn[4]) << 24) |
 1e8:	60 93 8d 00 	sts	0x008D, r22
 1ec:	70 93 8e 00 	sts	0x008E, r23
 1f0:	80 93 8f 00 	sts	0x008F, r24
 1f4:	90 93 90 00 	sts	0x0090, r25
			   (((int32_t) TB_bufIn[5]) << 16) |
               (((int32_t) TB_bufIn[6]) <<  8) |
               (((int32_t) TB_bufIn[7])      ) ;

	switch (TB_bufIn[TB_BUF_COMMAND])
 1f8:	10 91 a2 00 	lds	r17, 0x00A2
 1fc:	1a 30       	cpi	r17, 0x0A	; 10
 1fe:	09 f4       	brne	.+2      	; 0x202 <TB_Decode+0x56>
 200:	6a c0       	rjmp	.+212    	; 0x2d6 <TB_Decode+0x12a>
 202:	30 f4       	brcc	.+12     	; 0x210 <TB_Decode+0x64>
 204:	11 30       	cpi	r17, 0x01	; 1
 206:	09 f4       	brne	.+2      	; 0x20a <TB_Decode+0x5e>
 208:	93 c0       	rjmp	.+294    	; 0x330 <TB_Decode+0x184>
 20a:	19 30       	cpi	r17, 0x09	; 9
 20c:	41 f0       	breq	.+16     	; 0x21e <TB_Decode+0x72>
 20e:	89 c0       	rjmp	.+274    	; 0x322 <TB_Decode+0x176>
 210:	1c 31       	cpi	r17, 0x1C	; 28
 212:	08 f4       	brcc	.+2      	; 0x216 <TB_Decode+0x6a>
 214:	8d c0       	rjmp	.+282    	; 0x330 <TB_Decode+0x184>
 216:	1f 3f       	cpi	r17, 0xFF	; 255
 218:	09 f4       	brne	.+2      	; 0x21c <TB_Decode+0x70>
 21a:	8a c0       	rjmp	.+276    	; 0x330 <TB_Decode+0x184>
 21c:	82 c0       	rjmp	.+260    	; 0x322 <TB_Decode+0x176>
			break;
		case READ_EEPROM:
			return READ_EEPROM;
			break;
		case TB_CMD_SGP:
			if (TB_bufIn[TB_BUF_MOTOR] != 0)
 21e:	10 91 a4 00 	lds	r17, 0x00A4
 222:	11 23       	and	r17, r17
 224:	29 f0       	breq	.+10     	; 0x230 <TB_Decode+0x84>
			{
				TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	ba 01       	movw	r22, r20
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	7d c0       	rjmp	.+250    	; 0x32a <TB_Decode+0x17e>
			}
			else
			{
				switch (TB_bufIn[TB_BUF_TYPE])
 230:	20 91 a3 00 	lds	r18, 0x00A3
 234:	21 34       	cpi	r18, 0x41	; 65
 236:	21 f1       	breq	.+72     	; 0x280 <TB_Decode+0xd4>
 238:	18 f4       	brcc	.+6      	; 0x240 <TB_Decode+0x94>
 23a:	20 34       	cpi	r18, 0x40	; 64
 23c:	31 f0       	breq	.+12     	; 0x24a <TB_Decode+0x9e>
 23e:	6c c0       	rjmp	.+216    	; 0x318 <TB_Decode+0x16c>
 240:	22 34       	cpi	r18, 0x42	; 66
 242:	61 f1       	breq	.+88     	; 0x29c <TB_Decode+0xf0>
 244:	2c 34       	cpi	r18, 0x4C	; 76
 246:	c1 f1       	breq	.+112    	; 0x2b8 <TB_Decode+0x10c>
 248:	67 c0       	rjmp	.+206    	; 0x318 <TB_Decode+0x16c>
				{
					case TB_GBPARAM_EEMAGIC:
						if (TB_Value != TB_gbparam.eemagic)
 24a:	c0 90 9a 00 	lds	r12, 0x009A
 24e:	d1 2c       	mov	r13, r1
 250:	e1 2c       	mov	r14, r1
 252:	f1 2c       	mov	r15, r1
 254:	6c 15       	cp	r22, r12
 256:	7d 05       	cpc	r23, r13
 258:	8e 05       	cpc	r24, r14
 25a:	9f 05       	cpc	r25, r15
 25c:	69 f0       	breq	.+26     	; 0x278 <TB_Decode+0xcc>
						{
							TB_gbparam.eemagic = TB_Value;
 25e:	60 93 9a 00 	sts	0x009A, r22
							b = (void *) &(TB_gbparam.eemagic) - (void *) &(TB_gbparam);
 262:	19 82       	std	Y+1, r1	; 0x01
							eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.eemagic);
 264:	49 81       	ldd	r20, Y+1	; 0x01
 266:	20 91 aa 00 	lds	r18, 0x00AA
 26a:	30 91 ab 00 	lds	r19, 0x00AB
 26e:	c9 01       	movw	r24, r18
 270:	84 0f       	add	r24, r20
 272:	91 1d       	adc	r25, r1
 274:	0e 94 ad 03 	call	0x75a	; 0x75a <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_OK, 0);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	ba 01       	movw	r22, r20
 27e:	48 c0       	rjmp	.+144    	; 0x310 <TB_Decode+0x164>
						break;
					case TB_GBPARAM_BAUD:
						if (TB_Value != TB_gbparam.baud)
 280:	c0 90 9b 00 	lds	r12, 0x009B
 284:	d1 2c       	mov	r13, r1
 286:	e1 2c       	mov	r14, r1
 288:	f1 2c       	mov	r15, r1
 28a:	6c 15       	cp	r22, r12
 28c:	7d 05       	cpc	r23, r13
 28e:	8e 05       	cpc	r24, r14
 290:	9f 05       	cpc	r25, r15
 292:	91 f3       	breq	.-28     	; 0x278 <TB_Decode+0xcc>
						{
							TB_gbparam.baud = TB_Value;
 294:	60 93 9b 00 	sts	0x009B, r22
							b = (void *) &(TB_gbparam.baud) - (void *) &(TB_gbparam);
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	1b c0       	rjmp	.+54     	; 0x2d2 <TB_Decode+0x126>
							eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.baud);
						}
						TB_SendAck(TB_ERR_OK, 0);
						break;
					case TB_GBPARAM_ADDRESS:
						if (TB_Value != TB_gbparam.address)
 29c:	c0 90 9c 00 	lds	r12, 0x009C
 2a0:	d1 2c       	mov	r13, r1
 2a2:	e1 2c       	mov	r14, r1
 2a4:	f1 2c       	mov	r15, r1
 2a6:	6c 15       	cp	r22, r12
 2a8:	7d 05       	cpc	r23, r13
 2aa:	8e 05       	cpc	r24, r14
 2ac:	9f 05       	cpc	r25, r15
 2ae:	21 f3       	breq	.-56     	; 0x278 <TB_Decode+0xcc>
						{
							TB_gbparam.address = TB_Value;
 2b0:	60 93 9c 00 	sts	0x009C, r22
					        b = (void *) &(TB_gbparam.address) - (void *) &(TB_gbparam);
 2b4:	22 e0       	ldi	r18, 0x02	; 2
 2b6:	0d c0       	rjmp	.+26     	; 0x2d2 <TB_Decode+0x126>
							eeprom_update_byte(b+addr_setting_in_eeprom, TB_gbparam.address);
						}
						TB_SendAck(TB_ERR_OK, 0);
						break;
					case TB_GBPARAM_HOST_ADDR:
						if (TB_Value != TB_gbparam.host_address)
 2b8:	c0 90 9e 00 	lds	r12, 0x009E
 2bc:	d1 2c       	mov	r13, r1
 2be:	e1 2c       	mov	r14, r1
 2c0:	f1 2c       	mov	r15, r1
 2c2:	6c 15       	cp	r22, r12
 2c4:	7d 05       	cpc	r23, r13
 2c6:	8e 05       	cpc	r24, r14
 2c8:	9f 05       	cpc	r25, r15
 2ca:	b1 f2       	breq	.-84     	; 0x278 <TB_Decode+0xcc>
						{
							TB_gbparam.host_address = TB_Value;
 2cc:	60 93 9e 00 	sts	0x009E, r22
							b = (void *) &(TB_gbparam.host_address) - (void *) &(TB_gbparam);
 2d0:	24 e0       	ldi	r18, 0x04	; 4
 2d2:	29 83       	std	Y+1, r18	; 0x01
 2d4:	c7 cf       	rjmp	.-114    	; 0x264 <TB_Decode+0xb8>
						break;
				}
			}
			break;
		case TB_CMD_GGP:
			if (TB_bufIn[TB_BUF_MOTOR] != 0)
 2d6:	10 91 a4 00 	lds	r17, 0x00A4
 2da:	11 11       	cpse	r17, r1
 2dc:	a4 cf       	rjmp	.-184    	; 0x226 <TB_Decode+0x7a>
			{
				TB_SendAck(TB_ERR_VALUE, 0); // invalid value
			}
			else
			{
		        switch (TB_bufIn[TB_BUF_TYPE])
 2de:	80 91 a3 00 	lds	r24, 0x00A3
 2e2:	81 34       	cpi	r24, 0x41	; 65
 2e4:	69 f0       	breq	.+26     	; 0x300 <TB_Decode+0x154>
 2e6:	28 f4       	brcc	.+10     	; 0x2f2 <TB_Decode+0x146>
 2e8:	80 34       	cpi	r24, 0x40	; 64
 2ea:	b1 f4       	brne	.+44     	; 0x318 <TB_Decode+0x16c>
						break;
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
						break;
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
 2ec:	40 91 9a 00 	lds	r20, 0x009A
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <TB_Decode+0x15e>
			{
				TB_SendAck(TB_ERR_VALUE, 0); // invalid value
			}
			else
			{
		        switch (TB_bufIn[TB_BUF_TYPE])
 2f2:	82 34       	cpi	r24, 0x42	; 66
 2f4:	41 f0       	breq	.+16     	; 0x306 <TB_Decode+0x15a>
 2f6:	8c 34       	cpi	r24, 0x4C	; 76
 2f8:	79 f4       	brne	.+30     	; 0x318 <TB_Decode+0x16c>
						break;
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_OK, TB_gbparam.address);
						break;
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
 2fa:	40 91 9e 00 	lds	r20, 0x009E
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <TB_Decode+0x15e>
			else
			{
		        switch (TB_bufIn[TB_BUF_TYPE])
				{
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_OK, TB_gbparam.baud);
 300:	40 91 9b 00 	lds	r20, 0x009B
 304:	02 c0       	rjmp	.+4      	; 0x30a <TB_Decode+0x15e>
						break;
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_OK, TB_gbparam.address);
 306:	40 91 9c 00 	lds	r20, 0x009C
						break;
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_OK, TB_gbparam.host_address);
						break;
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_OK, TB_gbparam.eemagic);
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	84 e6       	ldi	r24, 0x64	; 100
 312:	0e 94 a3 00 	call	0x146	; 0x146 <TB_SendAck>
						break;
 316:	0c c0       	rjmp	.+24     	; 0x330 <TB_Decode+0x184>
					default:
						TB_SendAck(TB_ERR_VALUE, 0); // invalid value
 318:	40 e0       	ldi	r20, 0x00	; 0
 31a:	50 e0       	ldi	r21, 0x00	; 0
 31c:	ba 01       	movw	r22, r20
 31e:	84 e0       	ldi	r24, 0x04	; 4
 320:	f8 cf       	rjmp	.-16     	; 0x312 <TB_Decode+0x166>
			break;
		case EXIT_BOOTLOADER:
			return EXIT_BOOTLOADER;
			break;
		default:
			TB_SendAck(TB_ERR_COMMAND, 0); // invalid command
 322:	40 e0       	ldi	r20, 0x00	; 0
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	ba 01       	movw	r22, r20
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 a3 00 	call	0x146	; 0x146 <TB_SendAck>
			return 0;
 32e:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 0;
}
 330:	81 2f       	mov	r24, r17
 332:	0f 90       	pop	r0
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <uart_pac_rx_size>:
  return (uart0_buf_pac_rx_ptr_e == uart0_buf_pac_rx_ptr_b);
}

inline byte uart_pac_rx_size(void)
{
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
 344:	80 91 67 00 	lds	r24, 0x0067
 348:	90 91 68 00 	lds	r25, 0x0068
 34c:	89 1b       	sub	r24, r25
}
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	08 95       	ret

00000352 <uart_get_char>:
  return 9;
}

inline byte uart_rx_empty(void)
{
  return (uart0_buf_rx_ptr_e == uart0_buf_rx_ptr_b);
 352:	90 91 6c 00 	lds	r25, 0x006C
 356:	80 91 6d 00 	lds	r24, 0x006D
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
 35a:	98 17       	cp	r25, r24
 35c:	61 f0       	breq	.+24     	; 0x376 <uart_get_char+0x24>

  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
 35e:	90 91 6d 00 	lds	r25, 0x006D
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	9f 70       	andi	r25, 0x0F	; 15
  res = uart0_buf_rx[ptr];
 366:	e9 2f       	mov	r30, r25
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	ea 5b       	subi	r30, 0xBA	; 186
 36c:	fe 4f       	sbci	r31, 0xFE	; 254
 36e:	80 81       	ld	r24, Z
  uart0_buf_rx_ptr_b = ptr;
 370:	90 93 6d 00 	sts	0x006D, r25
  return res;
 374:	08 95       	ret
  // read     -> b++, read *b
  // interrupt safe -> read *(b+1); b++
  byte ptr;
  byte res;
  
  if (uart_rx_empty()) return 0;
 376:	80 e0       	ldi	r24, 0x00	; 0
  ptr = (uart0_buf_rx_ptr_b+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
  res = uart0_buf_rx[ptr];
  uart0_buf_rx_ptr_b = ptr;
  return res;
  
}
 378:	08 95       	ret

0000037a <uart_receive_char>:
{
  // write    -> e++, write *e
  // interrupt safe -> write *(e+1); e++
  byte ptr;

  ptr = (uart0_buf_rx_ptr_e+1) & UART0_BUFFER_LINEAR_SIZE_MAX;
 37a:	90 91 6c 00 	lds	r25, 0x006C
 37e:	9f 5f       	subi	r25, 0xFF	; 255
 380:	9f 70       	andi	r25, 0x0F	; 15
  uart0_buf_rx[ptr] = dat;
 382:	e9 2f       	mov	r30, r25
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	ea 5b       	subi	r30, 0xBA	; 186
 388:	fe 4f       	sbci	r31, 0xFE	; 254
 38a:	80 83       	st	Z, r24
  uart0_buf_rx_ptr_e = ptr;
 38c:	90 93 6c 00 	sts	0x006C, r25
 390:	08 95       	ret

00000392 <uart_send_char>:
char uart_send_char(void)
{
  byte ptr;
  byte res;

  ptr = uart0_buf_tx_ptr;
 392:	90 91 6b 00 	lds	r25, 0x006B
  res = uart0_buf_tx[ptr];
 396:	e9 2f       	mov	r30, r25
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	e3 55       	subi	r30, 0x53	; 83
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	80 81       	ld	r24, Z
  uart0_buf_tx_ptr = ptr+1;
 3a0:	9f 5f       	subi	r25, 0xFF	; 255
 3a2:	90 93 6b 00 	sts	0x006B, r25
  return res;
}
 3a6:	08 95       	ret

000003a8 <uart_send>:
/******************************************************/
// start sending TX buffer
/******************************************************/
void uart_send(void)
{
  if (uart0_flags.txing == FALSE) {
 3a8:	80 91 64 00 	lds	r24, 0x0064
 3ac:	80 fd       	sbrc	r24, 0
 3ae:	0b c0       	rjmp	.+22     	; 0x3c6 <uart_send+0x1e>
    // is some data in buffer ?
    uart0_flags.txing = TRUE;
 3b0:	80 91 64 00 	lds	r24, 0x0064
 3b4:	81 60       	ori	r24, 0x01	; 1
 3b6:	80 93 64 00 	sts	0x0064, r24
    //uart0_tx_timeout = UART0_TX_TIMEOUT;
    UART0_TX_ENA;  // tx mode
 3ba:	92 9a       	sbi	0x12, 2	; 18
    uart0_buf_tx_ptr = 0; // send first byte from buffer
 3bc:	10 92 6b 00 	sts	0x006B, r1
    UART0_PROC_UDR = uart_send_char();
 3c0:	0e 94 c9 01 	call	0x392	; 0x392 <uart_send_char>
 3c4:	8c b9       	out	0x0c, r24	; 12
 3c6:	08 95       	ret

000003c8 <__vector_13>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_RX_vect)
{
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	2f 93       	push	r18
 3d4:	3f 93       	push	r19
 3d6:	4f 93       	push	r20
 3d8:	5f 93       	push	r21
 3da:	6f 93       	push	r22
 3dc:	7f 93       	push	r23
 3de:	8f 93       	push	r24
 3e0:	9f 93       	push	r25
 3e2:	af 93       	push	r26
 3e4:	bf 93       	push	r27
 3e6:	ef 93       	push	r30
 3e8:	ff 93       	push	r31
  byte tmpDat;
  byte tmpStatus;
  
  uart0_rx_timeout = UART0_TIMEOUT;
 3ea:	85 e0       	ldi	r24, 0x05	; 5
 3ec:	80 93 66 00 	sts	0x0066, r24
  tmpStatus = UART0_PROC_UCSRA;
 3f0:	8b b1       	in	r24, 0x0b	; 11
  uart0_status |= tmpStatus;
 3f2:	90 91 65 00 	lds	r25, 0x0065
 3f6:	89 2b       	or	r24, r25
 3f8:	80 93 65 00 	sts	0x0065, r24
  tmpDat = UART0_PROC_UDR;
 3fc:	8c b1       	in	r24, 0x0c	; 12
  uart_receive_char(tmpDat);
 3fe:	0e 94 bd 01 	call	0x37a	; 0x37a <uart_receive_char>
}
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <__vector_15>:

/******************************************************/
//
/******************************************************/
ISR(UART0_PROC_TX_vect)
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
  byte tmpDat;

  // ???
  if (uart0_flags.txing == FALSE) return;
 446:	80 91 64 00 	lds	r24, 0x0064
 44a:	80 ff       	sbrs	r24, 0
 44c:	0e c0       	rjmp	.+28     	; 0x46a <__vector_15+0x46>

  // is next data in buffer?
  if (uart0_buf_tx_ptr > 8) {
 44e:	80 91 6b 00 	lds	r24, 0x006B
 452:	89 30       	cpi	r24, 0x09	; 9
 454:	38 f0       	brcs	.+14     	; 0x464 <__vector_15+0x40>
    // whole buffer was sended
    uart0_flags.txing = FALSE;
 456:	80 91 64 00 	lds	r24, 0x0064
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	80 93 64 00 	sts	0x0064, r24
    // if whole packed was send, wait for response
    //uart0_flags.wait_tx = TRUE;
    UART0_TX_DIS;   // rx mode
 460:	92 98       	cbi	0x12, 2	; 18
    return;
 462:	03 c0       	rjmp	.+6      	; 0x46a <__vector_15+0x46>
  } else {
    // send next byte
    tmpDat = uart_send_char();
 464:	0e 94 c9 01 	call	0x392	; 0x392 <uart_send_char>
    UART0_PROC_UDR = tmpDat;
 468:	8c b9       	out	0x0c, r24	; 12
  }
}
 46a:	ff 91       	pop	r31
 46c:	ef 91       	pop	r30
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	7f 91       	pop	r23
 478:	6f 91       	pop	r22
 47a:	5f 91       	pop	r21
 47c:	4f 91       	pop	r20
 47e:	3f 91       	pop	r19
 480:	2f 91       	pop	r18
 482:	0f 90       	pop	r0
 484:	0f be       	out	0x3f, r0	; 63
 486:	0f 90       	pop	r0
 488:	1f 90       	pop	r1
 48a:	18 95       	reti

0000048c <uart0_init>:
// Initialization
void uart0_init(void)
{
  // UART port

  UART0_PROC_UBRRL = (F_CPU / (16UL * UART0_DEFAULT_BAUD)) - 1;
 48c:	87 e0       	ldi	r24, 0x07	; 7
 48e:	89 b9       	out	0x09, r24	; 9

  UART0_PROC_UCSRB |= BV(UART0_PROC_TXEN) | BV(UART0_PROC_RXEN); /* tx/rx enable */
 490:	8a b1       	in	r24, 0x0a	; 10
 492:	88 61       	ori	r24, 0x18	; 24
 494:	8a b9       	out	0x0a, r24	; 10
// Enable/disable interrupts
/******************************************************/
void uart_interrupt_rx(byte enable)
{
  if (enable)
    UART0_PROC_UCSRB |= BV(UART0_PROC_RXCIE);
 496:	57 9a       	sbi	0x0a, 7	; 10
}

void uart_interrupt_tx(byte enable)
{
  if (enable)
    UART0_PROC_UCSRB |= BV(UART0_PROC_TXCIE);
 498:	56 9a       	sbi	0x0a, 6	; 10

  UART0_PROC_UCSRB |= BV(UART0_PROC_TXEN) | BV(UART0_PROC_RXEN); /* tx/rx enable */

  uart_interrupt_rx(TRUE);
  uart_interrupt_tx(TRUE);
  uart0_status = 0;
 49a:	10 92 65 00 	sts	0x0065, r1
 49e:	08 95       	ret

000004a0 <uart0_process>:
}

//----------------------------------------------------------
// process internal logic
void uart0_process(void)
{
 4a0:	cf 92       	push	r12
 4a2:	df 92       	push	r13
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
  return ((uart0_buf_pac_rx_ptr_e - uart0_buf_pac_rx_ptr_b) & UART0_BUFFER_PACKET_SIZE_MAX);
}

inline byte uart_pac_tx_empty(void)
{
  return (uart0_buf_pac_tx_ptr_e == uart0_buf_pac_tx_ptr_b);
 4ae:	90 91 69 00 	lds	r25, 0x0069
 4b2:	80 91 6a 00 	lds	r24, 0x006A
  byte iptr;
  byte sum;
  byte *ptr;

  // pøedává zpravy na odvysílání z paketového do lineárního bufferu
  if (!uart_pac_tx_empty()) {
 4b6:	98 17       	cp	r25, r24
 4b8:	01 f1       	breq	.+64     	; 0x4fa <uart0_process+0x5a>
    // jsou data k odesláni ?
    if ((!uart0_flags.txing)) {
 4ba:	80 91 64 00 	lds	r24, 0x0064
 4be:	80 fd       	sbrc	r24, 0
 4c0:	1c c0       	rjmp	.+56     	; 0x4fa <uart0_process+0x5a>
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 4c2:	80 91 6a 00 	lds	r24, 0x006A
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
 4c8:	8f 70       	andi	r24, 0x0F	; 15
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
 4ca:	99 e0       	ldi	r25, 0x09	; 9
 4cc:	89 9f       	mul	r24, r25
 4ce:	f0 01       	movw	r30, r0
 4d0:	11 24       	eor	r1, r1
 4d2:	ea 5a       	subi	r30, 0xAA	; 170
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	20 e0       	ldi	r18, 0x00	; 0
 4d8:	30 e0       	ldi	r19, 0x00	; 0
      for (i=0; i<9; i++) {
        uart0_buf_tx[i] = *ptr;
 4da:	91 91       	ld	r25, Z+
 4dc:	d9 01       	movw	r26, r18
 4de:	a3 55       	subi	r26, 0x53	; 83
 4e0:	bf 4f       	sbci	r27, 0xFF	; 255
 4e2:	9c 93       	st	X, r25
 4e4:	2f 5f       	subi	r18, 0xFF	; 255
 4e6:	3f 4f       	sbci	r19, 0xFF	; 255
    if ((!uart0_flags.txing)) {
      // nevysíláme ?
      // zaèneme vysílat dalí zprávu
      iptr = (uart0_buf_pac_tx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
      ptr = (byte *) &(uart0_buf_pac_tx[iptr].b[0]);
      for (i=0; i<9; i++) {
 4e8:	29 30       	cpi	r18, 0x09	; 9
 4ea:	31 05       	cpc	r19, r1
 4ec:	b1 f7       	brne	.-20     	; 0x4da <uart0_process+0x3a>
        uart0_buf_tx[i] = *ptr;
        ptr++;
      }
      uart0_buf_pac_tx_ptr_b = iptr;
 4ee:	80 93 6a 00 	sts	0x006A, r24
      uart0_buf_tx_ptr = 0;
 4f2:	10 92 6b 00 	sts	0x006B, r1
      uart_send();
 4f6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <uart_send>
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
 4fa:	80 91 64 00 	lds	r24, 0x0064
 4fe:	83 fd       	sbrc	r24, 3
 500:	4b c0       	rjmp	.+150    	; 0x598 <uart0_process+0xf8>
/******************************************************/
// Useful functions
/******************************************************/
inline byte uart_rx_size(void)
{
  return ((uart0_buf_rx_ptr_e - uart0_buf_rx_ptr_b) & UART0_BUFFER_LINEAR_SIZE_MAX);
 502:	80 91 6c 00 	lds	r24, 0x006C
 506:	90 91 6d 00 	lds	r25, 0x006D
 50a:	89 1b       	sub	r24, r25
 50c:	8f 70       	andi	r24, 0x0F	; 15
      uart_send();
    }
  }

  // kontroluje pøijatá data
  if ((!uart0_flags.data_received) && (uart_rx_size() > 8)) {
 50e:	89 30       	cpi	r24, 0x09	; 9
 510:	08 f4       	brcc	.+2      	; 0x514 <uart0_process+0x74>
 512:	42 c0       	rjmp	.+132    	; 0x598 <uart0_process+0xf8>
    // máme alespoò 9 bytù dat a nejsou nezpracovaná data?


    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 514:	c0 91 67 00 	lds	r28, 0x0067
 518:	cf 5f       	subi	r28, 0xFF	; 255
 51a:	cf 70       	andi	r28, 0x0F	; 15
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);
 51c:	ec 2e       	mov	r14, r28
 51e:	f1 2c       	mov	r15, r1
 520:	e9 e0       	ldi	r30, 0x09	; 9
 522:	ce 9f       	mul	r28, r30
 524:	80 01       	movw	r16, r0
 526:	11 24       	eor	r1, r1
 528:	0a 54       	subi	r16, 0x4A	; 74
 52a:	1f 4f       	sbci	r17, 0xFF	; 255
 52c:	68 01       	movw	r12, r16
 52e:	f9 e0       	ldi	r31, 0x09	; 9
 530:	cf 0e       	add	r12, r31
 532:	d1 1c       	adc	r13, r1

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
      *ptr = uart_get_char();
 534:	0e 94 a9 01 	call	0x352	; 0x352 <uart_get_char>
 538:	f8 01       	movw	r30, r16
 53a:	81 93       	st	Z+, r24
 53c:	8f 01       	movw	r16, r30
    // zjístíme adresu volného místa v paketovém pøijímacm bufferu
    iptr = (uart0_buf_pac_rx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
    ptr = (byte *) &(uart0_buf_pac_rx[iptr].b[0]);

    // pøedáme do paketového pøijímacího bufferu
    for(i=0; i<9; i++) {
 53e:	ec 15       	cp	r30, r12
 540:	fd 05       	cpc	r31, r13
 542:	c1 f7       	brne	.-16     	; 0x534 <uart0_process+0x94>
 544:	f9 e0       	ldi	r31, 0x09	; 9
 546:	cf 9f       	mul	r28, r31
 548:	a0 01       	movw	r20, r0
 54a:	11 24       	eor	r1, r1
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	20 e0       	ldi	r18, 0x00	; 0
 552:	fc 01       	movw	r30, r24
 554:	e4 0f       	add	r30, r20
 556:	f5 1f       	adc	r31, r21
 558:	ea 54       	subi	r30, 0x4A	; 74
 55a:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
      sum += uart0_buf_pac_rx[iptr].b[i];
 55c:	30 81       	ld	r19, Z
 55e:	23 0f       	add	r18, r19
 560:	01 96       	adiw	r24, 0x01	; 1
      //uart0_buf_pac_rx[0].b[i] = uart_get_char(); 
    }
    
    // odpovídá kontrolní souèet?
    sum = 0;
    for(i=0; i<8; i++) {
 562:	88 30       	cpi	r24, 0x08	; 8
 564:	91 05       	cpc	r25, r1
 566:	a9 f7       	brne	.-22     	; 0x552 <uart0_process+0xb2>
      sum += uart0_buf_pac_rx[iptr].b[i];
    }
    if (sum == uart0_buf_pac_rx[iptr].b[8]) {
 568:	89 e0       	ldi	r24, 0x09	; 9
 56a:	8e 9d       	mul	r24, r14
 56c:	f0 01       	movw	r30, r0
 56e:	8f 9d       	mul	r24, r15
 570:	f0 0d       	add	r31, r0
 572:	11 24       	eor	r1, r1
 574:	ea 54       	subi	r30, 0x4A	; 74
 576:	ff 4f       	sbci	r31, 0xFF	; 255
 578:	80 85       	ldd	r24, Z+8	; 0x08
 57a:	28 13       	cpse	r18, r24
 57c:	08 c0       	rjmp	.+16     	; 0x58e <uart0_process+0xee>
      // souèet v poøádku
      uart0_flags.data_received = TRUE; 
 57e:	80 91 64 00 	lds	r24, 0x0064
 582:	88 60       	ori	r24, 0x08	; 8
 584:	80 93 64 00 	sts	0x0064, r24
      uart0_buf_pac_rx_ptr_e = iptr;
 588:	c0 93 67 00 	sts	0x0067, r28
 58c:	05 c0       	rjmp	.+10     	; 0x598 <uart0_process+0xf8>

     } else {
      uart0_flags.data_receive_error = TRUE;
 58e:	80 91 64 00 	lds	r24, 0x0064
 592:	80 61       	ori	r24, 0x10	; 16
 594:	80 93 64 00 	sts	0x0064, r24
    }
  }

}
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	ef 90       	pop	r14
 5a2:	df 90       	pop	r13
 5a4:	cf 90       	pop	r12
 5a6:	08 95       	ret

000005a8 <uart0_get_data_begin>:
// must be called uart0_get_data_end() at end of handling data
byte * uart0_get_data_begin(void)
{
  byte iptr;
  
  iptr = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 5a8:	80 91 68 00 	lds	r24, 0x0068
 5ac:	8f 5f       	subi	r24, 0xFF	; 255
 5ae:	8f 70       	andi	r24, 0x0F	; 15
  return (byte *) &uart0_buf_pac_rx[iptr].b[0];
 5b0:	29 e0       	ldi	r18, 0x09	; 9
 5b2:	82 9f       	mul	r24, r18
 5b4:	c0 01       	movw	r24, r0
 5b6:	11 24       	eor	r1, r1
}
 5b8:	8a 54       	subi	r24, 0x4A	; 74
 5ba:	9f 4f       	sbci	r25, 0xFF	; 255
 5bc:	08 95       	ret

000005be <uart0_get_data_end>:
// must be called after uart0_get_data_begin()
byte uart0_get_data_end(void)
{
  byte i;
  
  i = (uart0_buf_pac_rx_ptr_b+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 5be:	80 91 68 00 	lds	r24, 0x0068
 5c2:	8f 5f       	subi	r24, 0xFF	; 255
 5c4:	8f 70       	andi	r24, 0x0F	; 15
  uart0_buf_pac_rx_ptr_b = i;
 5c6:	80 93 68 00 	sts	0x0068, r24
  
  i = uart_pac_rx_size();
 5ca:	0e 94 a2 01 	call	0x344	; 0x344 <uart_pac_rx_size>
  if (i == 0) {
 5ce:	81 11       	cpse	r24, r1
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <uart0_get_data_end+0x1e>
    uart0_flags.data_received = FALSE;
 5d2:	90 91 64 00 	lds	r25, 0x0064
 5d6:	97 7f       	andi	r25, 0xF7	; 247
 5d8:	90 93 64 00 	sts	0x0064, r25
  }
  return i;
}
 5dc:	08 95       	ret

000005de <uart0_put_data>:


//----------------------------------------------------------
// send packet pointed by dataptr
void uart0_put_data(byte * dataptr)
{
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	fc 01       	movw	r30, r24
  byte i;
  byte iptr;
  byte sum;

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;
 5e4:	90 91 69 00 	lds	r25, 0x0069
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	9f 70       	andi	r25, 0x0F	; 15
 5ec:	89 e0       	ldi	r24, 0x09	; 9
 5ee:	98 9f       	mul	r25, r24
 5f0:	e0 01       	movw	r28, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	20 e0       	ldi	r18, 0x00	; 0
 5f6:	30 e0       	ldi	r19, 0x00	; 0

  sum = 0;
 5f8:	40 e0       	ldi	r20, 0x00	; 0
  // copy data with sum
  for(i=0; i<8; i++) {
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
 5fa:	69 2f       	mov	r22, r25
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	d9 01       	movw	r26, r18
 602:	ac 0f       	add	r26, r28
 604:	bd 1f       	adc	r27, r29
 606:	aa 5a       	subi	r26, 0xAA	; 170
 608:	be 4f       	sbci	r27, 0xFE	; 254
 60a:	8c 93       	st	X, r24
    sum += *dataptr;
 60c:	81 91       	ld	r24, Z+
 60e:	48 0f       	add	r20, r24
 610:	2f 5f       	subi	r18, 0xFF	; 255
 612:	3f 4f       	sbci	r19, 0xFF	; 255

  iptr = (uart0_buf_pac_tx_ptr_e+1) & UART0_BUFFER_PACKET_SIZE_MAX;

  sum = 0;
  // copy data with sum
  for(i=0; i<8; i++) {
 614:	28 30       	cpi	r18, 0x08	; 8
 616:	31 05       	cpc	r19, r1
 618:	91 f7       	brne	.-28     	; 0x5fe <uart0_put_data+0x20>
    uart0_buf_pac_tx[iptr].b[i] = *dataptr;
    sum += *dataptr;
    dataptr++;
  }
  uart0_buf_pac_tx[iptr].n.sum = sum; // save calculated sum
 61a:	89 e0       	ldi	r24, 0x09	; 9
 61c:	86 9f       	mul	r24, r22
 61e:	f0 01       	movw	r30, r0
 620:	87 9f       	mul	r24, r23
 622:	f0 0d       	add	r31, r0
 624:	11 24       	eor	r1, r1
 626:	ea 5a       	subi	r30, 0xAA	; 170
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	40 87       	std	Z+8, r20	; 0x08

  uart0_buf_pac_tx_ptr_e = iptr;
 62c:	90 93 69 00 	sts	0x0069, r25
}
 630:	df 91       	pop	r29
 632:	cf 91       	pop	r28
 634:	08 95       	ret

00000636 <uart0_set_baud>:
// Set from default baud rates
#define MACRO_BAUDRATE(BAUDRATE) (UART0_PROC_UBRRL = (F_CPU / (16UL * BAUDRATE)) - 1)
void uart0_set_baud(byte baud)
{
  // UART port
  switch (baud) {
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	8b 30       	cpi	r24, 0x0B	; 11
 63a:	91 05       	cpc	r25, r1
 63c:	c8 f4       	brcc	.+50     	; 0x670 <uart0_set_baud+0x3a>
 63e:	fc 01       	movw	r30, r24
 640:	e6 5d       	subi	r30, 0xD6	; 214
 642:	ff 4f       	sbci	r31, 0xFF	; 255
 644:	0c 94 97 03 	jmp	0x72e	; 0x72e <__tablejump2__>
    case 0:  
      MACRO_BAUDRATE(9600);
 648:	8f e5       	ldi	r24, 0x5F	; 95
 64a:	13 c0       	rjmp	.+38     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 1:  
      MACRO_BAUDRATE(14400);
 64c:	8f e3       	ldi	r24, 0x3F	; 63
 64e:	11 c0       	rjmp	.+34     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 2:  
      MACRO_BAUDRATE(19200);
      break;
    case 3:  
      MACRO_BAUDRATE(28800);
 650:	8f e1       	ldi	r24, 0x1F	; 31
 652:	0f c0       	rjmp	.+30     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 4:  
      MACRO_BAUDRATE(38400);
 654:	87 e1       	ldi	r24, 0x17	; 23
 656:	0d c0       	rjmp	.+26     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 5:  
      MACRO_BAUDRATE(57600);
 658:	8f e0       	ldi	r24, 0x0F	; 15
 65a:	0b c0       	rjmp	.+22     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 6:  
      MACRO_BAUDRATE(76800);
 65c:	8b e0       	ldi	r24, 0x0B	; 11
 65e:	09 c0       	rjmp	.+18     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 7:  
      MACRO_BAUDRATE(115200);
 660:	87 e0       	ldi	r24, 0x07	; 7
 662:	07 c0       	rjmp	.+14     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 8:  
      MACRO_BAUDRATE(230400);
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	05 c0       	rjmp	.+10     	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 9:  
      MACRO_BAUDRATE(250000);
 668:	82 e0       	ldi	r24, 0x02	; 2
 66a:	03 c0       	rjmp	.+6      	; 0x672 <uart0_set_baud+0x3c>
      break;
    case 10:  
      MACRO_BAUDRATE(500000);
 66c:	19 b8       	out	0x09, r1	; 9
      break;
 66e:	08 95       	ret
    default:  
      MACRO_BAUDRATE(19200);
 670:	8f e2       	ldi	r24, 0x2F	; 47
 672:	89 b9       	out	0x09, r24	; 9
 674:	08 95       	ret

00000676 <send_data>:



void send_data(void)
{
	uart0_put_data((byte *) &TB_bufOut);
 676:	81 e9       	ldi	r24, 0x91	; 145
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	0c 94 ef 02 	jmp	0x5de	; 0x5de <uart0_put_data>

0000067e <__vector_6>:
}

//----------------------------------------------------------
ISR(TIMER1_CAPT_vect) {
 67e:	1f 92       	push	r1
 680:	0f 92       	push	r0
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	0f 92       	push	r0
 686:	11 24       	eor	r1, r1
 688:	8f 93       	push	r24
	// T = 10ms
	
	timer0_flag = TRUE;
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 6e 00 	sts	0x006E, r24
	
}
 690:	8f 91       	pop	r24
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <try_receive_data>:
void try_receive_data(void)
{
	byte i;
	byte *ptr;
	
	if (uart0_flags.data_received)
 69c:	80 91 64 00 	lds	r24, 0x0064
 6a0:	83 ff       	sbrs	r24, 3
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <try_receive_data+0x4c>
	{
		ptr = uart0_get_data_begin();
 6a4:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <uart0_get_data_begin>
 6a8:	e1 ea       	ldi	r30, 0xA1	; 161
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	29 e0       	ldi	r18, 0x09	; 9
 6ae:	2e 0f       	add	r18, r30
		for (i=0; i<9; i++)
		{
			TB_bufIn[i] = *ptr;
 6b0:	dc 01       	movw	r26, r24
 6b2:	3d 91       	ld	r19, X+
 6b4:	cd 01       	movw	r24, r26
 6b6:	31 93       	st	Z+, r19
	byte *ptr;
	
	if (uart0_flags.data_received)
	{
		ptr = uart0_get_data_begin();
		for (i=0; i<9; i++)
 6b8:	2e 13       	cpse	r18, r30
 6ba:	fa cf       	rjmp	.-12     	; 0x6b0 <try_receive_data+0x14>
		{
			TB_bufIn[i] = *ptr;
			ptr++;
		}
		uart0_get_data_end();
 6bc:	0e 94 df 02 	call	0x5be	; 0x5be <uart0_get_data_end>
		uart0_flags.data_received = FALSE;
 6c0:	80 91 64 00 	lds	r24, 0x0064
 6c4:	87 7f       	andi	r24, 0xF7	; 247
 6c6:	80 93 64 00 	sts	0x0064, r24
		if (TB_Read() == 0)
 6ca:	0e 94 b7 00 	call	0x16e	; 0x16e <TB_Read>
 6ce:	81 11       	cpse	r24, r1
 6d0:	0b c0       	rjmp	.+22     	; 0x6e8 <try_receive_data+0x4c>
		{
			switch (TB_Decode())
 6d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <TB_Decode>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	39 f4       	brne	.+14     	; 0x6e8 <try_receive_data+0x4c>
			{
				case ENTER_BOOTLOADER:
					TB_SendAck(ACK, ENTER_BOOTLOADER);
 6da:	41 e0       	ldi	r20, 0x01	; 1
 6dc:	50 e0       	ldi	r21, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	0c 94 a3 00 	jmp	0x146	; 0x146 <TB_SendAck>
 6e8:	08 95       	ret

000006ea <main>:

int main(void)
{
	
    /* Replace with your application code */
	cli();
 6ea:	f8 94       	cli
	
	
	//Nastavení Systemového enable pro RS485 pro UART0
	DDRD |= (1 << DDD1) | (1 << DDD2);
 6ec:	81 b3       	in	r24, 0x11	; 17
 6ee:	86 60       	ori	r24, 0x06	; 6
 6f0:	81 bb       	out	0x11, r24	; 17
	
	DDRA |= (1 << DDA7) | (1 << DDA6) | (1 << DDA5);
 6f2:	8a b3       	in	r24, 0x1a	; 26
 6f4:	80 6e       	ori	r24, 0xE0	; 224
 6f6:	8a bb       	out	0x1a, r24	; 26
	
	//timer_init();
	
	uart0_init();
 6f8:	0e 94 46 02 	call	0x48c	; 0x48c <uart0_init>
	TB_Callback_setBaud = &uart0_set_baud;
 6fc:	8b e1       	ldi	r24, 0x1B	; 27
 6fe:	93 e0       	ldi	r25, 0x03	; 3
 700:	90 93 61 00 	sts	0x0061, r25
 704:	80 93 60 00 	sts	0x0060, r24
	TB_Callback_TX = &send_data;
 708:	8b e3       	ldi	r24, 0x3B	; 59
 70a:	93 e0       	ldi	r25, 0x03	; 3
 70c:	90 93 63 00 	sts	0x0063, r25
 710:	80 93 62 00 	sts	0x0062, r24
	TB_Init((void*) 0x10); // addr in eeprom with settings
 714:	80 e1       	ldi	r24, 0x10	; 16
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 68 00 	call	0xd0	; 0xd0 <TB_Init>
	
	sei();
 71c:	78 94       	sei
	
    while (1) 
    {
		//process_timer_100Hz();
		uart0_process();
 71e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <uart0_process>
		try_receive_data();
 722:	0e 94 4e 03 	call	0x69c	; 0x69c <try_receive_data>
		PORTA |= (1 << PA7) | (1 << PA6) | (1 << PA5);
 726:	8b b3       	in	r24, 0x1b	; 27
 728:	80 6e       	ori	r24, 0xE0	; 224
 72a:	8b bb       	out	0x1b, r24	; 27
			{
				cnt = 0;
				jumpaddress();
			}
		}	*/
    }
 72c:	f8 cf       	rjmp	.-16     	; 0x71e <main+0x34>

0000072e <__tablejump2__>:
 72e:	ee 0f       	add	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	05 90       	lpm	r0, Z+
 734:	f4 91       	lpm	r31, Z
 736:	e0 2d       	mov	r30, r0
 738:	09 94       	ijmp

0000073a <eeprom_read_block>:
 73a:	dc 01       	movw	r26, r24
 73c:	cb 01       	movw	r24, r22

0000073e <eeprom_read_blraw>:
 73e:	fc 01       	movw	r30, r24
 740:	e1 99       	sbic	0x1c, 1	; 28
 742:	fe cf       	rjmp	.-4      	; 0x740 <eeprom_read_blraw+0x2>
 744:	06 c0       	rjmp	.+12     	; 0x752 <eeprom_read_blraw+0x14>
 746:	ff bb       	out	0x1f, r31	; 31
 748:	ee bb       	out	0x1e, r30	; 30
 74a:	e0 9a       	sbi	0x1c, 0	; 28
 74c:	31 96       	adiw	r30, 0x01	; 1
 74e:	0d b2       	in	r0, 0x1d	; 29
 750:	0d 92       	st	X+, r0
 752:	41 50       	subi	r20, 0x01	; 1
 754:	50 40       	sbci	r21, 0x00	; 0
 756:	b8 f7       	brcc	.-18     	; 0x746 <eeprom_read_blraw+0x8>
 758:	08 95       	ret

0000075a <eeprom_update_byte>:
 75a:	26 2f       	mov	r18, r22

0000075c <eeprom_update_r18>:
 75c:	e1 99       	sbic	0x1c, 1	; 28
 75e:	fe cf       	rjmp	.-4      	; 0x75c <eeprom_update_r18>
 760:	9f bb       	out	0x1f, r25	; 31
 762:	8e bb       	out	0x1e, r24	; 30
 764:	e0 9a       	sbi	0x1c, 0	; 28
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	0d b2       	in	r0, 0x1d	; 29
 76a:	02 16       	cp	r0, r18
 76c:	31 f0       	breq	.+12     	; 0x77a <eeprom_update_r18+0x1e>
 76e:	2d bb       	out	0x1d, r18	; 29
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	e2 9a       	sbi	0x1c, 2	; 28
 776:	e1 9a       	sbi	0x1c, 1	; 28
 778:	0f be       	out	0x3f, r0	; 63
 77a:	08 95       	ret

0000077c <eeprom_write_block>:
 77c:	dc 01       	movw	r26, r24
 77e:	cb 01       	movw	r24, r22
 780:	03 c0       	rjmp	.+6      	; 0x788 <eeprom_write_block+0xc>
 782:	2d 91       	ld	r18, X+
 784:	0e 94 c9 03 	call	0x792	; 0x792 <eeprom_write_r18>
 788:	41 50       	subi	r20, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	d0 f7       	brcc	.-12     	; 0x782 <eeprom_write_block+0x6>
 78e:	08 95       	ret

00000790 <eeprom_write_byte>:
 790:	26 2f       	mov	r18, r22

00000792 <eeprom_write_r18>:
 792:	e1 99       	sbic	0x1c, 1	; 28
 794:	fe cf       	rjmp	.-4      	; 0x792 <eeprom_write_r18>
 796:	9f bb       	out	0x1f, r25	; 31
 798:	8e bb       	out	0x1e, r24	; 30
 79a:	2d bb       	out	0x1d, r18	; 29
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	f8 94       	cli
 7a0:	e2 9a       	sbi	0x1c, 2	; 28
 7a2:	e1 9a       	sbi	0x1c, 1	; 28
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	08 95       	ret

000007aa <_exit>:
 7aa:	f8 94       	cli

000007ac <__stop_program>:
 7ac:	ff cf       	rjmp	.-2      	; 0x7ac <__stop_program>
